#!/bin/bash
API_URL="https://pokeapi.co/api/v2/pokemon/pikachu"
OUTPUT_FILE="data.json"
ERROR_FILE="errors.txt"

# Log rotation for error file
MAX_LOG_SIZE=10240 # 10KB
if [ -f "$ERROR_FILE" ] && [ $(stat -c%s "$ERROR_FILE") -ge $MAX_LOG_SIZE ]; then
    mv "$ERROR_FILE" "${ERROR_FILE}.bak"
    echo "Log file rotated: $(date '+%Y-%m-%d %H:%M:%S')" > "$ERROR_FILE"
fi

echo "Fetching Pikachu data from Pokemon API..."

# Make the API request and capture both output and HTTP status
response=$(curl -s -w "\n%{http_code}" "$API_URL" -o temp_response.json)
http_code=$(echo "$response" | tail -n1)

if [ "$http_code" -eq 200 ]; then
    # Validate JSON before saving
    if jq empty temp_response.json > /dev/null 2>&1; then
        mv temp_response.json "$OUTPUT_FILE"
        echo "✓ Successfully saved Pikachu data to $OUTPUT_FILE"
    else
        echo "✗ Invalid JSON received. Error logged to $ERROR_FILE"
        timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        echo "[$timestamp] Invalid JSON received" >> "$ERROR_FILE"
        rm -f temp_response.json
        exit 1
    fi
else
    # Error: log the failure
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] API request failed with HTTP code: $http_code" >> "$ERROR_FILE"
    
    # If there's response content, add it to error log
    if [ -s temp_response.json ]; then
        echo "[$timestamp] Response: $(head -c 500 temp_response.json)" >> "$ERROR_FILE"
    fi
    
    # Clean up temp file
    rm -f temp_response.json
    
    echo "✗ Request failed (HTTP $http_code). Error logged to $ERROR_FILE"
    exit 1
fi