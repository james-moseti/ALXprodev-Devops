#!/bin/bash

API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
ERROR_FILE="batch_errors.txt"
MAX_RETRIES=3
REQUEST_TIMEOUT=30
DELAY_SECONDS=1

POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Setup
mkdir -p "$OUTPUT_DIR"
echo "[$(date)] Session started" > "$ERROR_FILE"

# Log function
log_error() {
    echo "[$(date)] $1" >> "$ERROR_FILE"
}

# Network check
check_network() {
    curl -s --max-time 5 "https://pokeapi.co" > /dev/null 2>&1
}

# Validate Pokemon name
validate_name() {
    [[ "$1" =~ ^[a-z-]+$ ]]
}

# Fetch with retry logic
fetch_pokemon() {
    local name="$1"
    local output="$OUTPUT_DIR/${name}.json"
    local url="$API_BASE_URL/${name}"
    local attempt=1
    
    if ! validate_name "$name"; then
        log_error "Invalid name format: $name"
        return 1
    fi
    
    echo "Fetching $name..."
    
    while [ $attempt -le $MAX_RETRIES ]; do
        local temp="temp_${name}_${attempt}.json"
        local response=$(curl -s -w "%{http_code}" --max-time "$REQUEST_TIMEOUT" --fail "$url" -o "$temp" 2>/dev/null)
        local http_code="${response: -3}"
        
        case "$http_code" in
            200)
                if jq empty "$temp" 2>/dev/null; then
                    mv "$temp" "$output"
                    echo "✓ $name saved"
                    return 0
                else
                    log_error "$name: Invalid JSON (attempt $attempt)"
                    rm -f "$temp"
                fi
                ;;
            404)
                log_error "$name: Not found (HTTP 404)"
                rm -f "$temp"
                return 1
                ;;
            429)
                log_error "$name: Rate limited (attempt $attempt)"
                rm -f "$temp"
                sleep $((DELAY_SECONDS * attempt * 2))
                ;;
            000|"")
                log_error "$name: Network/timeout error (attempt $attempt)"
                rm -f "$temp"
                ;;
            *)
                log_error "$name: HTTP $http_code (attempt $attempt)"
                rm -f "$temp"
                ;;
        esac
        
        ((attempt++))
        [ $attempt -le $MAX_RETRIES ] && sleep "$DELAY_SECONDS"
    done
    
    echo "✗ $name failed after $MAX_RETRIES attempts"
    log_error "$name: Failed after $MAX_RETRIES attempts"
    return 1
}

# Cleanup
cleanup() {
    rm -f temp_*.json
    echo "[$(date)] Session completed" >> "$ERROR_FILE"
}
trap cleanup EXIT

# Main execution
if ! check_network; then
    echo "Network connectivity failed"
    log_error "Network connectivity test failed"
    exit 1
fi

success=0
total=${#POKEMON_LIST[@]}

for pokemon in "${POKEMON_LIST[@]}"; do
    if fetch_pokemon "$pokemon"; then
        ((success++))
    fi
    sleep "$DELAY_SECONDS"
done

echo "Completed: $success/$total successful"
echo "Error log: $ERROR_FILE"